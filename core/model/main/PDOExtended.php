<?php

	namespace model\main;

	use PDO;
	use PDOStatement;

	/** Расширение для класса PDO
	 *
	 * @version       2.0
	 * @author        Insys <intsystem88@gmail.com>
	 * @copyright (c) 2013, Insys
	 * @link          https://github.com/InSys/pdo-extended
	 * @license       http://opensource.org/licenses/GPL-2.0 The GNU General Public License (GPL-2.0)
	 */
	class PDOExtended extends PDO
	{
		private $query_count = 0;
		public  $dsn;
		const DSN_REGEX = '/^(?P<user>\w+)(:(?P<password>\w+))?@(?P<host>[.\w]+)(:(?P<port>\d+))?\\\\(?P<database>\w+)$/im';

		public function __construct($dsn, $username = NULL, $password = NULL, $driverOptions = [])
		{
			parent::__construct($dsn, $username, $password, $driverOptions);
			$this->ParseDsn($dsn);
			$this->setAttribute(PDO::ATTR_STATEMENT_CLASS, ['model\main\PDOExtendedStatement', [$this]]);
		}

		protected function ParseDsn($dsn)
		{
			$result = [
				'driver'   => '',
				'user'     => '',
				'password' => '',
				'host'     => 'localhost',
				'port'     => 3306,
				'database' => '',
			];
			if (strlen($dsn) == 0) {
				return FALSE;
			}
			$a = explode(':', $dsn);
			if ($a > 1) {
				$result['driver'] = $a[0];
			} else {
				return FALSE;
			}

			if (preg_match(self::DSN_REGEX, $dsn, $matches)) {
				if (count($matches) > 0) {
					foreach ($result as $key => $value) {
						if (array_key_exists($key, $matches) and !empty($matches[$key])) {
							$result[$key] = $matches[$key];
						}
					}
				}
			}
			$this->dsn = $result;
			return $result;
		}

		public function query_count_increment()
		{
			$this->query_count++;
		}

		public function __get($name)
		{
			if ($name == 'query_count') {
				return $this->query_count;
			}
			return NULL;
		}

		public function __set($name, $value)
		{
			return FALSE;
		}

		public function __isset($name)
		{
			if ($name == 'query_count') {
				return TRUE;
			}
			return FALSE;
		}

		/**
		 * @param string $statement SQL request
		 * @return bool|PDOStatement
		 */
		public function query($statement, ...$a)
		{
			$this->query_count_increment();
			return parent::query($statement); // TODO: Change the autogenerated stub
		}

		/**
		 * @param string $statement SQL request
		 * @return bool|PDOStatement
		 */
		public function exec($statement)
		{
			$this->query_count_increment();
			return parent::exec($statement); // TODO: Change the autogenerated stub
		}

		/**
		 * @param       $statement
		 * @param array $driver_options
		 * @return bool|PDOExtendedPoolStatement
		 */
		public function poolPrepare($statement, array $driver_options = [])
		{
			$this->setAttribute(PDO::ATTR_STATEMENT_CLASS, ['model\main\PDOExtendedPoolStatement', [$this]]);
			$r = parent::prepare($statement, $driver_options);
			$this->setAttribute(PDO::ATTR_STATEMENT_CLASS, ['model\main\PDOExtendedStatement', [$this]]);
			return $r;
		}

	}

