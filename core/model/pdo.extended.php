<?php

	namespace core\model;

	use PDO;
	use PDOStatement;

	/** Расширение для класса PDO
	 *
	 * @version       2.0
	 * @author        Insys <intsystem88@gmail.com>
	 * @copyright (c) 2013, Insys
	 * @link          https://github.com/InSys/pdo-extended
	 * @license       http://opensource.org/licenses/GPL-2.0 The GNU General Public License (GPL-2.0)
	 */
	class PDOExtended extends PDO
	{
		private $query_count = 0;

		public function __construct($dsn, $username = NULL, $password = NULL, $driverOptions = [])
		{
			parent::__construct($dsn, $username, $password, $driverOptions);
			$this->setAttribute(PDO::ATTR_STATEMENT_CLASS, ['core\model\PDOExtendedStatement', [$this]]);
		}

		public function query_count_increment()
		{
			$this->query_count++;
		}

		public function __get($name)
		{
			if ($name == 'query_count') {
				return $this->query_count;
			}
			return NULL;
		}

		public function __set($name, $value)
		{
			return FALSE;
		}

		public function __isset($name)
		{
			if ($name == 'query_count') {
				return TRUE;
			}
			return FALSE;
		}

		/**
		 * @param string $statement SQL request
		 * @return bool|PDOStatement
		 */
		public function query($statement,...$a)
		{
			$this->query_count_increment();
			return parent::query($statement); // TODO: Change the autogenerated stub
		}
		/**
		 * @param string $statement SQL request
		 * @return bool|PDOStatement
		 */
		public function exec($statement)
		{
			$this->query_count_increment();
			return parent::exec($statement); // TODO: Change the autogenerated stub
		}

		public static function __set_state($arr)
		{
			global $core;
			return $core->db;
		}
	}

	class PDOExtendedStatement extends PDOStatement
	{
		private $connection;

		protected function __construct(PDO $connection)
		{
			$this->connection = $connection;
		}

		public function execute($input_parameters = NULL)
		{
			$this->connection->query_count_increment();
			return parent::execute($input_parameters); // TODO: Change the autogenerated stub
		}
	}
